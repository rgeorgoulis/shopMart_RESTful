{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\nimport getWidth from 'dom-lib/getWidth';\nimport getHeight from 'dom-lib/getHeight';\nimport getOffset from 'dom-lib/getOffset';\nimport { SCROLLBAR_WIDTH } from '../constants';\nimport debounce from 'lodash/debounce';\nimport bindElementResize, { unbind as unbindElementResize } from 'element-resize-event';\nimport useMount from './useMount';\nimport useUpdateLayoutEffect from './useUpdateLayoutEffect';\nimport isNumberOrTrue from './isNumberOrTrue';\n/**\n * The dimension information of the table,\n * including the height, width, scrollable distance and the coordinates of the scroll handle, etc.\n * @param props\n * @returns\n */\n\nvar useTableDimension = function useTableDimension(props) {\n  var data = props.data,\n      rowHeight = props.rowHeight,\n      tableRef = props.tableRef,\n      headerWrapperRef = props.headerWrapperRef,\n      prefix = props.prefix,\n      widthProp = props.width,\n      affixHeader = props.affixHeader,\n      affixHorizontalScrollbar = props.affixHorizontalScrollbar,\n      headerHeight = props.headerHeight,\n      height = props.height,\n      autoHeight = props.autoHeight,\n      children = props.children,\n      expandedRowKeys = props.expandedRowKeys,\n      onTableWidthChange = props.onTableWidthChange,\n      onTableContentWidthChange = props.onTableContentWidthChange,\n      onTableContentHeightChange = props.onTableContentHeightChange,\n      onTableScroll = props.onTableScroll;\n  var contentHeight = useRef(0);\n  var contentWidth = useRef(0);\n  var minScrollY = useRef(0);\n  var scrollY = useRef(0);\n  var scrollX = useRef(0);\n  var minScrollX = useRef(0);\n  var tableWidth = useRef(widthProp || 0);\n  var columnCount = useRef(0);\n  var headerOffset = useRef(null);\n  var tableOffset = useRef(null);\n  var calculateTableContextHeight = useCallback(function () {\n    var prevContentHeight = contentHeight.current;\n    var table = tableRef.current;\n    var rows = table.querySelectorAll(\".\" + prefix('row')) || [];\n    var nextContentHeight = rows.length ? Array.from(rows).map(function (row) {\n      return getHeight(row) || rowHeight;\n    }).reduce(function (x, y) {\n      return x + y;\n    }) : 0; // After setting the affixHeader property, the height of the two headers should be subtracted.\n\n    contentHeight.current = Math.round(nextContentHeight - (affixHeader ? headerHeight * 2 : headerHeight));\n\n    if (!autoHeight) {\n      /**\n       *  The purpose of subtracting SCROLLBAR_WIDTH is to keep the scroll bar from blocking the content part.\n       *  But it will only be calculated when there is a horizontal scroll bar (contentWidth > tableWidth).\n       */\n      minScrollY.current = -(nextContentHeight - height) - (contentWidth.current > tableWidth.current ? SCROLLBAR_WIDTH : 0);\n    } // If the height of the content area is less than the height of the table, the vertical scroll bar is reset.\n\n\n    if (nextContentHeight < height) {\n      onTableScroll({\n        y: 0\n      });\n    } // If the value of scrollTop is greater than the scrollable range, the vertical scroll bar is reset.\n    // When Table is set to virtualized, the logic will be entered every time the wheel event is triggered\n    // to avoid resetting the scroll bar after scrolling to the bottom, so add the SCROLLBAR_WIDTH value.\n\n\n    if (Math.abs(scrollY.current) + height - headerHeight > nextContentHeight + SCROLLBAR_WIDTH) {\n      onTableScroll({\n        y: scrollY.current\n      });\n    }\n\n    if (prevContentHeight !== contentHeight.current) {\n      onTableContentHeightChange(prevContentHeight);\n    }\n  }, [affixHeader, autoHeight, headerHeight, height, onTableScroll, onTableContentHeightChange, prefix, rowHeight, tableRef]);\n  var setOffsetByAffix = useCallback(function () {\n    var headerNode = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;\n\n    if (isNumberOrTrue(affixHeader) && headerNode) {\n      headerOffset.current = getOffset(headerNode);\n    }\n\n    if (isNumberOrTrue(affixHorizontalScrollbar) && tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableOffset.current = getOffset(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n  }, [affixHeader, affixHorizontalScrollbar, headerWrapperRef, tableRef]);\n  var calculateTableContentWidth = useCallback(function () {\n    var prevWidth = contentWidth.current;\n    var prevColumnCount = columnCount.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var row = table.querySelector(\".\" + prefix('row') + \":not(.virtualized)\");\n    var nextContentWidth = row ? getWidth(row) : 0;\n    contentWidth.current = nextContentWidth;\n    columnCount.current = (row === null || row === void 0 ? void 0 : row.querySelectorAll(\".\" + prefix('cell')).length) || 0; // The value of SCROLLBAR_WIDTH is subtracted so that the scroll bar does not block the content part.\n    // There is no vertical scroll bar after autoHeight.\n\n    minScrollX.current = -(nextContentWidth - tableWidth.current) - (autoHeight ? 0 : SCROLLBAR_WIDTH);\n    /**\n     * If the width of the content area and the number of columns change,\n     * the horizontal scroll bar is reset.\n     * fix: https://github.com/rsuite/rsuite/issues/2039\n     */\n\n    if (prevWidth > 0 && prevWidth !== contentWidth.current && prevColumnCount > 0 && prevColumnCount !== columnCount.current) {\n      onTableContentWidthChange(prevWidth);\n    }\n  }, [autoHeight, onTableContentWidthChange, prefix, tableRef]);\n  var calculateTableWidth = useCallback(function () {\n    var prevWidth = tableWidth.current;\n\n    if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      var nextWidth = getWidth(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n      tableWidth.current = nextWidth;\n    }\n\n    if (prevWidth && prevWidth !== tableWidth.current) {\n      scrollX.current = 0;\n      onTableWidthChange === null || onTableWidthChange === void 0 ? void 0 : onTableWidthChange(prevWidth);\n    }\n\n    setOffsetByAffix();\n  }, [onTableWidthChange, setOffsetByAffix, tableRef]);\n  useMount(function () {\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n    calculateTableWidth();\n    setOffsetByAffix();\n    bindElementResize(tableRef.current, debounce(calculateTableWidth, 400));\n  });\n  useUpdateLayoutEffect(function () {\n    calculateTableWidth();\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n  }, [data, height, contentHeight, expandedRowKeys, children, calculateTableContextHeight, calculateTableContentWidth]);\n  useEffect(function () {\n    return function () {\n      if (tableRef.current) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        unbindElementResize(tableRef.current);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var setScrollY = useCallback(function (value) {\n    scrollY.current = value;\n  }, []);\n  var setScrollX = useCallback(function (value) {\n    scrollX.current = value;\n  }, []);\n  return {\n    contentHeight: contentHeight,\n    contentWidth: contentWidth,\n    minScrollY: minScrollY,\n    minScrollX: minScrollX,\n    scrollY: scrollY,\n    scrollX: scrollX,\n    tableWidth: tableWidth,\n    headerOffset: headerOffset,\n    tableOffset: tableOffset,\n    setScrollY: setScrollY,\n    setScrollX: setScrollX\n  };\n};\n\nexport default useTableDimension;","map":{"version":3,"sources":["D:/WEB444/Assignments/A04/a04/node_modules/rsuite-table/es/utils/useTableDimension.js"],"names":["useRef","useCallback","useEffect","getWidth","getHeight","getOffset","SCROLLBAR_WIDTH","debounce","bindElementResize","unbind","unbindElementResize","useMount","useUpdateLayoutEffect","isNumberOrTrue","useTableDimension","props","data","rowHeight","tableRef","headerWrapperRef","prefix","widthProp","width","affixHeader","affixHorizontalScrollbar","headerHeight","height","autoHeight","children","expandedRowKeys","onTableWidthChange","onTableContentWidthChange","onTableContentHeightChange","onTableScroll","contentHeight","contentWidth","minScrollY","scrollY","scrollX","minScrollX","tableWidth","columnCount","headerOffset","tableOffset","calculateTableContextHeight","prevContentHeight","current","table","rows","querySelectorAll","nextContentHeight","length","Array","from","map","row","reduce","x","y","Math","round","abs","setOffsetByAffix","headerNode","calculateTableContentWidth","prevWidth","prevColumnCount","querySelector","nextContentWidth","calculateTableWidth","nextWidth","setScrollY","value","setScrollX"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,WAAjB,EAA8BC,SAA9B,QAA+C,OAA/C;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,iBAAP,IAA4BC,MAAM,IAAIC,mBAAtC,QAAiE,sBAAjE;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,KAA3B,EAAkC;AACxD,MAAIC,IAAI,GAAGD,KAAK,CAACC,IAAjB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,QAAQ,GAAGH,KAAK,CAACG,QAFrB;AAAA,MAGIC,gBAAgB,GAAGJ,KAAK,CAACI,gBAH7B;AAAA,MAIIC,MAAM,GAAGL,KAAK,CAACK,MAJnB;AAAA,MAKIC,SAAS,GAAGN,KAAK,CAACO,KALtB;AAAA,MAMIC,WAAW,GAAGR,KAAK,CAACQ,WANxB;AAAA,MAOIC,wBAAwB,GAAGT,KAAK,CAACS,wBAPrC;AAAA,MAQIC,YAAY,GAAGV,KAAK,CAACU,YARzB;AAAA,MASIC,MAAM,GAAGX,KAAK,CAACW,MATnB;AAAA,MAUIC,UAAU,GAAGZ,KAAK,CAACY,UAVvB;AAAA,MAWIC,QAAQ,GAAGb,KAAK,CAACa,QAXrB;AAAA,MAYIC,eAAe,GAAGd,KAAK,CAACc,eAZ5B;AAAA,MAaIC,kBAAkB,GAAGf,KAAK,CAACe,kBAb/B;AAAA,MAcIC,yBAAyB,GAAGhB,KAAK,CAACgB,yBAdtC;AAAA,MAeIC,0BAA0B,GAAGjB,KAAK,CAACiB,0BAfvC;AAAA,MAgBIC,aAAa,GAAGlB,KAAK,CAACkB,aAhB1B;AAiBA,MAAIC,aAAa,GAAGlC,MAAM,CAAC,CAAD,CAA1B;AACA,MAAImC,YAAY,GAAGnC,MAAM,CAAC,CAAD,CAAzB;AACA,MAAIoC,UAAU,GAAGpC,MAAM,CAAC,CAAD,CAAvB;AACA,MAAIqC,OAAO,GAAGrC,MAAM,CAAC,CAAD,CAApB;AACA,MAAIsC,OAAO,GAAGtC,MAAM,CAAC,CAAD,CAApB;AACA,MAAIuC,UAAU,GAAGvC,MAAM,CAAC,CAAD,CAAvB;AACA,MAAIwC,UAAU,GAAGxC,MAAM,CAACqB,SAAS,IAAI,CAAd,CAAvB;AACA,MAAIoB,WAAW,GAAGzC,MAAM,CAAC,CAAD,CAAxB;AACA,MAAI0C,YAAY,GAAG1C,MAAM,CAAC,IAAD,CAAzB;AACA,MAAI2C,WAAW,GAAG3C,MAAM,CAAC,IAAD,CAAxB;AACA,MAAI4C,2BAA2B,GAAG3C,WAAW,CAAC,YAAY;AACxD,QAAI4C,iBAAiB,GAAGX,aAAa,CAACY,OAAtC;AACA,QAAIC,KAAK,GAAG7B,QAAQ,CAAC4B,OAArB;AACA,QAAIE,IAAI,GAAGD,KAAK,CAACE,gBAAN,CAAuB,MAAM7B,MAAM,CAAC,KAAD,CAAnC,KAA+C,EAA1D;AACA,QAAI8B,iBAAiB,GAAGF,IAAI,CAACG,MAAL,GAAcC,KAAK,CAACC,IAAN,CAAWL,IAAX,EAAiBM,GAAjB,CAAqB,UAAUC,GAAV,EAAe;AACxE,aAAOnD,SAAS,CAACmD,GAAD,CAAT,IAAkBtC,SAAzB;AACD,KAFqC,EAEnCuC,MAFmC,CAE5B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxB,aAAOD,CAAC,GAAGC,CAAX;AACD,KAJqC,CAAd,GAInB,CAJL,CAJwD,CAQhD;;AAERxB,IAAAA,aAAa,CAACY,OAAd,GAAwBa,IAAI,CAACC,KAAL,CAAWV,iBAAiB,IAAI3B,WAAW,GAAGE,YAAY,GAAG,CAAlB,GAAsBA,YAArC,CAA5B,CAAxB;;AAEA,QAAI,CAACE,UAAL,EAAiB;AACf;AACN;AACA;AACA;AACMS,MAAAA,UAAU,CAACU,OAAX,GAAqB,EAAEI,iBAAiB,GAAGxB,MAAtB,KAAiCS,YAAY,CAACW,OAAb,GAAuBN,UAAU,CAACM,OAAlC,GAA4CxC,eAA5C,GAA8D,CAA/F,CAArB;AACD,KAlBuD,CAkBtD;;;AAGF,QAAI4C,iBAAiB,GAAGxB,MAAxB,EAAgC;AAC9BO,MAAAA,aAAa,CAAC;AACZyB,QAAAA,CAAC,EAAE;AADS,OAAD,CAAb;AAGD,KAzBuD,CAyBtD;AACF;AACA;;;AAGA,QAAIC,IAAI,CAACE,GAAL,CAASxB,OAAO,CAACS,OAAjB,IAA4BpB,MAA5B,GAAqCD,YAArC,GAAoDyB,iBAAiB,GAAG5C,eAA5E,EAA6F;AAC3F2B,MAAAA,aAAa,CAAC;AACZyB,QAAAA,CAAC,EAAErB,OAAO,CAACS;AADC,OAAD,CAAb;AAGD;;AAED,QAAID,iBAAiB,KAAKX,aAAa,CAACY,OAAxC,EAAiD;AAC/Cd,MAAAA,0BAA0B,CAACa,iBAAD,CAA1B;AACD;AACF,GAvC4C,EAuC1C,CAACtB,WAAD,EAAcI,UAAd,EAA0BF,YAA1B,EAAwCC,MAAxC,EAAgDO,aAAhD,EAA+DD,0BAA/D,EAA2FZ,MAA3F,EAAmGH,SAAnG,EAA8GC,QAA9G,CAvC0C,CAA7C;AAwCA,MAAI4C,gBAAgB,GAAG7D,WAAW,CAAC,YAAY;AAC7C,QAAI8D,UAAU,GAAG5C,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,gBAAgB,CAAC2B,OAAtG;;AAEA,QAAIjC,cAAc,CAACU,WAAD,CAAd,IAA+BwC,UAAnC,EAA+C;AAC7CrB,MAAAA,YAAY,CAACI,OAAb,GAAuBzC,SAAS,CAAC0D,UAAD,CAAhC;AACD;;AAED,QAAIlD,cAAc,CAACW,wBAAD,CAAd,IAA4CN,QAAQ,KAAK,IAAzD,IAAiEA,QAAQ,KAAK,KAAK,CAAnF,IAAwFA,QAAQ,CAAC4B,OAArG,EAA8G;AAC5GH,MAAAA,WAAW,CAACG,OAAZ,GAAsBzC,SAAS,CAACa,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAAC4B,OAA9D,CAA/B;AACD;AACF,GAViC,EAU/B,CAACvB,WAAD,EAAcC,wBAAd,EAAwCL,gBAAxC,EAA0DD,QAA1D,CAV+B,CAAlC;AAWA,MAAI8C,0BAA0B,GAAG/D,WAAW,CAAC,YAAY;AACvD,QAAIgE,SAAS,GAAG9B,YAAY,CAACW,OAA7B;AACA,QAAIoB,eAAe,GAAGzB,WAAW,CAACK,OAAlC;AACA,QAAIC,KAAK,GAAG7B,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAAC4B,OAAzE;AACA,QAAIS,GAAG,GAAGR,KAAK,CAACoB,aAAN,CAAoB,MAAM/C,MAAM,CAAC,KAAD,CAAZ,GAAsB,oBAA1C,CAAV;AACA,QAAIgD,gBAAgB,GAAGb,GAAG,GAAGpD,QAAQ,CAACoD,GAAD,CAAX,GAAmB,CAA7C;AACApB,IAAAA,YAAY,CAACW,OAAb,GAAuBsB,gBAAvB;AACA3B,IAAAA,WAAW,CAACK,OAAZ,GAAsB,CAACS,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAACN,gBAAJ,CAAqB,MAAM7B,MAAM,CAAC,MAAD,CAAjC,EAA2C+B,MAAtF,KAAiG,CAAvH,CAPuD,CAOmE;AAC1H;;AAEAZ,IAAAA,UAAU,CAACO,OAAX,GAAqB,EAAEsB,gBAAgB,GAAG5B,UAAU,CAACM,OAAhC,KAA4CnB,UAAU,GAAG,CAAH,GAAOrB,eAA7D,CAArB;AACA;AACJ;AACA;AACA;AACA;;AAEI,QAAI2D,SAAS,GAAG,CAAZ,IAAiBA,SAAS,KAAK9B,YAAY,CAACW,OAA5C,IAAuDoB,eAAe,GAAG,CAAzE,IAA8EA,eAAe,KAAKzB,WAAW,CAACK,OAAlH,EAA2H;AACzHf,MAAAA,yBAAyB,CAACkC,SAAD,CAAzB;AACD;AACF,GApB2C,EAoBzC,CAACtC,UAAD,EAAaI,yBAAb,EAAwCX,MAAxC,EAAgDF,QAAhD,CApByC,CAA5C;AAqBA,MAAImD,mBAAmB,GAAGpE,WAAW,CAAC,YAAY;AAChD,QAAIgE,SAAS,GAAGzB,UAAU,CAACM,OAA3B;;AAEA,QAAI5B,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,IAA4CA,QAAQ,CAAC4B,OAAzD,EAAkE;AAChE,UAAIwB,SAAS,GAAGnE,QAAQ,CAACe,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAAC4B,OAA9D,CAAxB;AACAN,MAAAA,UAAU,CAACM,OAAX,GAAqBwB,SAArB;AACD;;AAED,QAAIL,SAAS,IAAIA,SAAS,KAAKzB,UAAU,CAACM,OAA1C,EAAmD;AACjDR,MAAAA,OAAO,CAACQ,OAAR,GAAkB,CAAlB;AACAhB,MAAAA,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,kBAAkB,CAACmC,SAAD,CAA1F;AACD;;AAEDH,IAAAA,gBAAgB;AACjB,GAdoC,EAclC,CAAChC,kBAAD,EAAqBgC,gBAArB,EAAuC5C,QAAvC,CAdkC,CAArC;AAeAP,EAAAA,QAAQ,CAAC,YAAY;AACnBiC,IAAAA,2BAA2B;AAC3BoB,IAAAA,0BAA0B;AAC1BK,IAAAA,mBAAmB;AACnBP,IAAAA,gBAAgB;AAChBtD,IAAAA,iBAAiB,CAACU,QAAQ,CAAC4B,OAAV,EAAmBvC,QAAQ,CAAC8D,mBAAD,EAAsB,GAAtB,CAA3B,CAAjB;AACD,GANO,CAAR;AAOAzD,EAAAA,qBAAqB,CAAC,YAAY;AAChCyD,IAAAA,mBAAmB;AACnBzB,IAAAA,2BAA2B;AAC3BoB,IAAAA,0BAA0B;AAC3B,GAJoB,EAIlB,CAAChD,IAAD,EAAOU,MAAP,EAAeQ,aAAf,EAA8BL,eAA9B,EAA+CD,QAA/C,EAAyDgB,2BAAzD,EAAsFoB,0BAAtF,CAJkB,CAArB;AAKA9D,EAAAA,SAAS,CAAC,YAAY;AACpB,WAAO,YAAY;AACjB,UAAIgB,QAAQ,CAAC4B,OAAb,EAAsB;AACpB;AACApC,QAAAA,mBAAmB,CAACQ,QAAQ,CAAC4B,OAAV,CAAnB;AACD;AACF,KALD,CADoB,CAMjB;AACJ,GAPQ,EAON,EAPM,CAAT;AAQA,MAAIyB,UAAU,GAAGtE,WAAW,CAAC,UAAUuE,KAAV,EAAiB;AAC5CnC,IAAAA,OAAO,CAACS,OAAR,GAAkB0B,KAAlB;AACD,GAF2B,EAEzB,EAFyB,CAA5B;AAGA,MAAIC,UAAU,GAAGxE,WAAW,CAAC,UAAUuE,KAAV,EAAiB;AAC5ClC,IAAAA,OAAO,CAACQ,OAAR,GAAkB0B,KAAlB;AACD,GAF2B,EAEzB,EAFyB,CAA5B;AAGA,SAAO;AACLtC,IAAAA,aAAa,EAAEA,aADV;AAELC,IAAAA,YAAY,EAAEA,YAFT;AAGLC,IAAAA,UAAU,EAAEA,UAHP;AAILG,IAAAA,UAAU,EAAEA,UAJP;AAKLF,IAAAA,OAAO,EAAEA,OALJ;AAMLC,IAAAA,OAAO,EAAEA,OANJ;AAOLE,IAAAA,UAAU,EAAEA,UAPP;AAQLE,IAAAA,YAAY,EAAEA,YART;AASLC,IAAAA,WAAW,EAAEA,WATR;AAUL4B,IAAAA,UAAU,EAAEA,UAVP;AAWLE,IAAAA,UAAU,EAAEA;AAXP,GAAP;AAaD,CA1JD;;AA4JA,eAAe3D,iBAAf","sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\nimport getWidth from 'dom-lib/getWidth';\nimport getHeight from 'dom-lib/getHeight';\nimport getOffset from 'dom-lib/getOffset';\nimport { SCROLLBAR_WIDTH } from '../constants';\nimport debounce from 'lodash/debounce';\nimport bindElementResize, { unbind as unbindElementResize } from 'element-resize-event';\nimport useMount from './useMount';\nimport useUpdateLayoutEffect from './useUpdateLayoutEffect';\nimport isNumberOrTrue from './isNumberOrTrue';\n\n/**\n * The dimension information of the table,\n * including the height, width, scrollable distance and the coordinates of the scroll handle, etc.\n * @param props\n * @returns\n */\nvar useTableDimension = function useTableDimension(props) {\n  var data = props.data,\n      rowHeight = props.rowHeight,\n      tableRef = props.tableRef,\n      headerWrapperRef = props.headerWrapperRef,\n      prefix = props.prefix,\n      widthProp = props.width,\n      affixHeader = props.affixHeader,\n      affixHorizontalScrollbar = props.affixHorizontalScrollbar,\n      headerHeight = props.headerHeight,\n      height = props.height,\n      autoHeight = props.autoHeight,\n      children = props.children,\n      expandedRowKeys = props.expandedRowKeys,\n      onTableWidthChange = props.onTableWidthChange,\n      onTableContentWidthChange = props.onTableContentWidthChange,\n      onTableContentHeightChange = props.onTableContentHeightChange,\n      onTableScroll = props.onTableScroll;\n  var contentHeight = useRef(0);\n  var contentWidth = useRef(0);\n  var minScrollY = useRef(0);\n  var scrollY = useRef(0);\n  var scrollX = useRef(0);\n  var minScrollX = useRef(0);\n  var tableWidth = useRef(widthProp || 0);\n  var columnCount = useRef(0);\n  var headerOffset = useRef(null);\n  var tableOffset = useRef(null);\n  var calculateTableContextHeight = useCallback(function () {\n    var prevContentHeight = contentHeight.current;\n    var table = tableRef.current;\n    var rows = table.querySelectorAll(\".\" + prefix('row')) || [];\n    var nextContentHeight = rows.length ? Array.from(rows).map(function (row) {\n      return getHeight(row) || rowHeight;\n    }).reduce(function (x, y) {\n      return x + y;\n    }) : 0; // After setting the affixHeader property, the height of the two headers should be subtracted.\n\n    contentHeight.current = Math.round(nextContentHeight - (affixHeader ? headerHeight * 2 : headerHeight));\n\n    if (!autoHeight) {\n      /**\n       *  The purpose of subtracting SCROLLBAR_WIDTH is to keep the scroll bar from blocking the content part.\n       *  But it will only be calculated when there is a horizontal scroll bar (contentWidth > tableWidth).\n       */\n      minScrollY.current = -(nextContentHeight - height) - (contentWidth.current > tableWidth.current ? SCROLLBAR_WIDTH : 0);\n    } // If the height of the content area is less than the height of the table, the vertical scroll bar is reset.\n\n\n    if (nextContentHeight < height) {\n      onTableScroll({\n        y: 0\n      });\n    } // If the value of scrollTop is greater than the scrollable range, the vertical scroll bar is reset.\n    // When Table is set to virtualized, the logic will be entered every time the wheel event is triggered\n    // to avoid resetting the scroll bar after scrolling to the bottom, so add the SCROLLBAR_WIDTH value.\n\n\n    if (Math.abs(scrollY.current) + height - headerHeight > nextContentHeight + SCROLLBAR_WIDTH) {\n      onTableScroll({\n        y: scrollY.current\n      });\n    }\n\n    if (prevContentHeight !== contentHeight.current) {\n      onTableContentHeightChange(prevContentHeight);\n    }\n  }, [affixHeader, autoHeight, headerHeight, height, onTableScroll, onTableContentHeightChange, prefix, rowHeight, tableRef]);\n  var setOffsetByAffix = useCallback(function () {\n    var headerNode = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;\n\n    if (isNumberOrTrue(affixHeader) && headerNode) {\n      headerOffset.current = getOffset(headerNode);\n    }\n\n    if (isNumberOrTrue(affixHorizontalScrollbar) && tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableOffset.current = getOffset(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n  }, [affixHeader, affixHorizontalScrollbar, headerWrapperRef, tableRef]);\n  var calculateTableContentWidth = useCallback(function () {\n    var prevWidth = contentWidth.current;\n    var prevColumnCount = columnCount.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var row = table.querySelector(\".\" + prefix('row') + \":not(.virtualized)\");\n    var nextContentWidth = row ? getWidth(row) : 0;\n    contentWidth.current = nextContentWidth;\n    columnCount.current = (row === null || row === void 0 ? void 0 : row.querySelectorAll(\".\" + prefix('cell')).length) || 0; // The value of SCROLLBAR_WIDTH is subtracted so that the scroll bar does not block the content part.\n    // There is no vertical scroll bar after autoHeight.\n\n    minScrollX.current = -(nextContentWidth - tableWidth.current) - (autoHeight ? 0 : SCROLLBAR_WIDTH);\n    /**\n     * If the width of the content area and the number of columns change,\n     * the horizontal scroll bar is reset.\n     * fix: https://github.com/rsuite/rsuite/issues/2039\n     */\n\n    if (prevWidth > 0 && prevWidth !== contentWidth.current && prevColumnCount > 0 && prevColumnCount !== columnCount.current) {\n      onTableContentWidthChange(prevWidth);\n    }\n  }, [autoHeight, onTableContentWidthChange, prefix, tableRef]);\n  var calculateTableWidth = useCallback(function () {\n    var prevWidth = tableWidth.current;\n\n    if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      var nextWidth = getWidth(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n      tableWidth.current = nextWidth;\n    }\n\n    if (prevWidth && prevWidth !== tableWidth.current) {\n      scrollX.current = 0;\n      onTableWidthChange === null || onTableWidthChange === void 0 ? void 0 : onTableWidthChange(prevWidth);\n    }\n\n    setOffsetByAffix();\n  }, [onTableWidthChange, setOffsetByAffix, tableRef]);\n  useMount(function () {\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n    calculateTableWidth();\n    setOffsetByAffix();\n    bindElementResize(tableRef.current, debounce(calculateTableWidth, 400));\n  });\n  useUpdateLayoutEffect(function () {\n    calculateTableWidth();\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n  }, [data, height, contentHeight, expandedRowKeys, children, calculateTableContextHeight, calculateTableContentWidth]);\n  useEffect(function () {\n    return function () {\n      if (tableRef.current) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        unbindElementResize(tableRef.current);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var setScrollY = useCallback(function (value) {\n    scrollY.current = value;\n  }, []);\n  var setScrollX = useCallback(function (value) {\n    scrollX.current = value;\n  }, []);\n  return {\n    contentHeight: contentHeight,\n    contentWidth: contentWidth,\n    minScrollY: minScrollY,\n    minScrollX: minScrollX,\n    scrollY: scrollY,\n    scrollX: scrollX,\n    tableWidth: tableWidth,\n    headerOffset: headerOffset,\n    tableOffset: tableOffset,\n    setScrollY: setScrollY,\n    setScrollX: setScrollX\n  };\n};\n\nexport default useTableDimension;"]},"metadata":{},"sourceType":"module"}